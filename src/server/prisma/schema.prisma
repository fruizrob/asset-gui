datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model assets {
  id                                        Int              @id @default(autoincrement())
  created_at                                DateTime?        @default(now()) @db.Timestamp(6)
  type                                      String?          @db.VarChar(255)
  content                                   Json?
  execution_logs                            execution_logs[]
  relations_relations_from_asset_idToassets relations[]      @relation("relations_from_asset_idToassets")
  relations_relations_to_asset_idToassets   relations[]      @relation("relations_to_asset_idToassets")
}

model execution_logs {
  id           Int         @id @default(autoincrement())
  created_at   DateTime?   @default(now()) @db.Timestamp(6)
  asset_id     Int?
  execution_id Int?
  assets       assets?     @relation(fields: [asset_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_asset")
  executions   executions? @relation(fields: [execution_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_execution")
}

model executions {
  id             Int              @id @default(autoincrement())
  domains        String?
  created_at     DateTime?        @default(now()) @db.Timestamp(6)
  execution_logs execution_logs[]
}

model migrations {
  id         String    @id
  applied_at DateTime? @db.Timestamptz(6)
}

model relations {
  id                                     Int       @id @default(autoincrement())
  created_at                             DateTime? @default(now()) @db.Timestamp(6)
  type                                   String?   @db.VarChar(255)
  from_asset_id                          Int
  to_asset_id                            Int
  assets_relations_from_asset_idToassets assets?   @relation("relations_from_asset_idToassets", fields: [from_asset_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_from_asset")
  assets_relations_to_asset_idToassets   assets?   @relation("relations_to_asset_idToassets", fields: [to_asset_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_to_asset")
}

generator client {
  provider = "prisma-client-js"
}
